
#include<stdlib.h>
#include<stdio.h>
#include <glut.h>
#include <math.h> 
#include <glu.h>
#include <time.h>
#define Pi 3.1415 
#define WIN_WIDTH 1200  // window 4:3
#define WIN_HEIGHT 900

unsigned char gFace = 'u';   // u:usual  a:angry   s:smiling
GLfloat gY = 0.0;  // jump
GLfloat gX = 0.0;  // moving-X
GLfloat gZ = 0.0; //앞뒤이동


GLint gNewWidth, gNewHeight;
GLfloat gWidthFactor, gHeightFactor;

GLint gTimeslot = 0;

const GLfloat gFace_color[] = { 251 / 255.0, 206 / 255.0, 177 / 255.0,1.0 }; //조명하의 얼굴색
const GLfloat gLight_pos[] = { 0,0,0,1 }; //광원위치

const GLfloat gar[] = { 0.4216, 0.2588, 0.0373, 1 }; //진한 갈색(나무)}
const GLfloat orange[] = { 1, 0.64705, 0.0, 1.0 };
const GLfloat yellow[] = { 0.8f, 0.8f, 0.0, 1.0 };
const GLfloat red[] = { 0.8f, 0.0, 0.0, 1.0 };
const GLfloat green[] = { 0, 0.3, 0.0, 1.0 };
const GLfloat blue[] = { 0.0, 0.2f, 1.0, 1.0 };
const GLfloat white[] = { 1.0, 1.0, 1.0, 1.0 };
const GLfloat black[] = { 0.0, 0.0, 0.0, 1.0 };
const GLfloat polished[] = { 100.0 };
const GLfloat dull[] = { 0.0 };
const GLfloat light_pos[] = { 0.0, 0.0, 0.0, 1.0 };

GLfloat move_y = 0.0;
GLfloat move_z = 0.0;
GLfloat const_att = 1.0; // 빛의 감쇠(Attenuation) 비율 지정

void Spring();
void Summer();
void Autumn();
void Winter();

void Snowman();
void Tree();
void House();
void Snow();
void SnowTimer();
void S(); //눈 하나
void F(); //꽃 하나
void Flower();
void Mountain();
void Butterfly1();
void Butterfly2();
void SpringTimer();
void Fly();
void Cloud();
void Water();
void SummerTimer();
void Pool();
void Parasol();
void Ball();
void Chair();
void Sun();
void Bird1();
void Bird2();
void Star(); //별가사리
void Leaf_Orange(); //주황단풍
void Leaf_Red(); //빨간단풍
void Autumn_Tree1();
void Autumn_Tree2();
void C(); //코스모스 한송이
void Cosmos(); 
void Autumn_Cloud();
void Fall();


void MyLightInit() {

	GLfloat global_ambient[] = { 0.5, 0.5, 0.5, 1.0 };	//전역 주변반사

	GLfloat Light1_Ambient[] = { 0.3, 0.3, 0.3, 1.0 };	//1번 광원 특성 (색상)
	GLfloat Light1_Diffuse[] = { 0.3, 0.3, 0.3, 0.3 };
	GLfloat Light1_Specular[] = { 1.0, 1.0, 1.0, 1.0 };


	GLfloat Light1_Position[] = { 0.0, 0.0, 1.0, 1.0 };	//1번 광원위치 (전체 살짝)


	glLightfv(GL_LIGHT1, GL_AMBIENT, Light1_Ambient);	//1번 광원 특성할당
	glLightfv(GL_LIGHT1, GL_DIFFUSE, Light1_Diffuse);
	glLightfv(GL_LIGHT1, GL_SPECULAR, Light1_Specular);

	glLightf(GL_LIGHT0, GL_SPOT_EXPONENT, 1.0);	//코사인 승수

	GLfloat material_ambient[] = { 0.0, 0.0, 0.0, 1.0 };	//물체 특성
	GLfloat material_diffuse[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat material_specular[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat material_shininess[] = { 127.0 };

	glMaterialfv(GL_FRONT, GL_DIFFUSE, material_diffuse);//물체 특성할당
	glMaterialfv(GL_FRONT, GL_SPECULAR, material_specular);
	glMaterialfv(GL_FRONT, GL_AMBIENT, material_ambient);
	glMaterialfv(GL_FRONT, GL_SHININESS, material_shininess);


	glEnable(GL_DEPTH_TEST);	//깊이 버퍼 활성화
	glEnable(GL_LIGHTING);	//조명 활성화
	glEnable(GL_LIGHT1);	//1번 광원 활성화
}

void MyDisplay() {

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	glTranslatef(0, 0, -5); //무대 안 객체들 밀기



	glPushMatrix();
	if (gTimeslot <= 10) Spring();//렉걸려서110으로
	else if (gTimeslot <= 30) Summer(); 
	else if (gTimeslot <= 50) Autumn();
	else if (gTimeslot <= 70) Winter();
	glPopMatrix();

	
	glutSwapBuffers();

} // MyDisplay

void Spring() {
	//하늘
	glColor3f(0.5294,0.8078, 0.9216);
	glBegin(GL_POLYGON);
	glVertex3f(-12, -8, 0);
	glVertex3f(-12, 8, 0);
	glVertex3f(12, 8, 0);
	glVertex3f(12, -8, 0);
	glEnd();


	Mountain(); //산

	//밭
	glColor3f(0,0.77777,0);
	glBegin(GL_POLYGON);
	glVertex3f(-12, -8, 0);
	glVertex3f(-12, -1, 0);
	glVertex3f(12, -1, 0);
	glVertex3f(12, -8, 0);
	glEnd();

	Flower();
	Fly();
	Cloud();

}
void Summer() {
	//배경 (하늘)
	glColor3f(0.61176, 1,0.988235);
	glBegin(GL_POLYGON);
	glVertex3f(-12, -8, 0);
	glVertex3f(-12, 8, 0);
	glVertex3f(12, 8, 0);
	glVertex3f(12, -8, 0);
	glEnd();
	//파란색 (물)
	glColor3f(0.29411765, 0.5372549, 0.8627451);
	glBegin(GL_POLYGON);
	glVertex3f(-12, -8, 0);
	glVertex3f(-12, 1, 0);
	glVertex3f(12, 1, 0);
	glVertex3f(12, -8, 0);
	glEnd();

	Pool(); //물 움직임
	Sun();
	Parasol();

	Chair();
	Ball();
	Star();


}
void Autumn() {

	//배경
	glColor3f(1,0.74705772,0);
	glBegin(GL_POLYGON);
	glVertex3f(-12, -8, 0);
	glVertex3f(-12, 8, 0);
	glVertex3f(12, 8, 0);
	glVertex3f(12, -8, 0);
	glEnd();

	Autumn_Cloud(); //구름


	//언덕
	glColor3f(0.8, 0.7, 0.1); //노랑
	glPushMatrix();
	glTranslatef(2, -2.5, 0);
	glScalef(10, 3, 1);
	glutSolidSphere(1, 40, 40);
	glPopMatrix();

	//들판
	glColor3f(0.8216, 0.5588, 0.1373); //황토
	glPushMatrix();
	glBegin(GL_POLYGON);
	glVertex3f(-12, -8, 0);
	glVertex3f(-12, -2, 0);
	glVertex3f(12, -2, 0);
	glVertex3f(12, -8, 0);
	glEnd();
	
	glPopMatrix();

	glPushMatrix();//push1
	glTranslatef(2.5, -0.3, 0);
	glScalef(0.8, 0.8, 1);
	Autumn_Tree1();
	glPopMatrix();//push1

	glPushMatrix();
	glTranslatef(-2.8, -0.3, 0);
	glScalef(0.8, 0.8, 1);
	Autumn_Tree2();

	glTranslatef(1,0.5,0);
	glScalef(0.8, 0.8, 1);
	Autumn_Tree1();

	glPopMatrix();

	//바닥 단풍
	glPushMatrix();
	glTranslatef(4, 2, 0);
	Leaf_Orange();
	glTranslatef(0.2, 0, 0);
	Leaf_Red();
	glTranslatef(0.2, -0.3, 0);
	Leaf_Orange();
	glTranslatef(0.4, 0.2, 0);
	Leaf_Red();

	glTranslatef(-3, 0.2, 0);
	//Leaf_Red();

	glTranslatef(-1.5, -0.2, 0);
	Leaf_Red();
	glTranslatef(0, -0.2, 0);
	Leaf_Orange();
	glTranslatef(-0.3, 0.3, 0);
	Leaf_Red();


	glTranslatef(-0.5, 0, 0);
	Leaf_Red();
	glTranslatef(-0.2, -0.2, 0);
	Leaf_Orange();
	glTranslatef(-0.2, 0.1, 0);
	Leaf_Red();

	glTranslatef(1.6, 0, 0);
	Leaf_Orange();

	glPopMatrix();

	Cosmos();
	Fall();
}

void Winter() {

	GLfloat Size[2], Angle;

	//gluLookAt(1, 0, 1, 0, 0, 0, 0, 1, 0);
	glPushMatrix();
	glColor3f(0.968, 0.92, 1); //연한 하늘색 배경
	glBegin(GL_POLYGON);
	glVertex3f(-12, -8, 0);
	glVertex3f(-12, 8, 0);
	glVertex3f(12, 8, 0);
	glVertex3f(12, -8, 0);
	glEnd();



	//언덕 
	glPushMatrix();
	glTranslatef(0, 1, 0);
	glColor3f(0.9, 0.9, 0.95);
	glTranslatef(-1.5, -2.5, 0);
	glScalef(10, 3, 1);
	glutSolidSphere(1, 40, 40);
	glPopMatrix();

	glColor3f(0.93, 0.93, 0.97);
	glTranslatef(2.5, -4, 0);
	glScalef(10, 4, 1);
	glutSolidSphere(1, 40, 40);

	glPopMatrix();


	glColor3f(0.856, 0.856, 0.976);
	glPushMatrix();
	glScalef(1.3,0.7,1);
	glTranslatef(-2.5, 3.5, 0);

	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.2 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.4, 0.2, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.6 * cos(Angle), 0.3 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.3, -0.2, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.6 * cos(Angle), 0.3 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.3, 0.3, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.6 * cos(Angle), 0.3 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.4, -0.2, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.2 * sin(Angle), 0.0);
	glEnd();

	glTranslatef(2.5, -0.3, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.6 * cos(Angle), 0.2 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.4, 0.2, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.3 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.3, -0.2, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.3 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.3, 0.3, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.3 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.45, -0.2, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.2 * sin(Angle), 0.0);
	glEnd();


	glPopMatrix();

	glPushMatrix();
	glTranslatef(-1.8, -1, 0);
	Snowman();
	glPopMatrix();

	Tree();
	glPushMatrix();
	glTranslatef(-0.2, 0.2, 0);
	glScalef(0.8, 0.8, 0);
	glTranslatef(5.5, -0.6, 0);
	Tree();
	glScalef(0.9, 0.9, 0);
	glTranslatef(0.8, -0.3, 0);
	Tree();
	glPopMatrix();

	House();
	Snow();
	

}

void Snowman() {
	GLfloat Size[2], Angle;

	/////////상반부시작///////////////
	glColor3f(0.777,0.888,0.999);
	glPushMatrix();
	glTranslatef(0, 0.4, 0);

	MyLightInit();

	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, white);
	glLightfv(GL_LIGHT0, GL_SPECULAR, white);
	glEnable(GL_DEPTH_TEST); 
	//조명 밑 z버퍼 켜기

	
	glutSolidSphere(0.5, 40, 40);
	
	
	glDisable(GL_LIGHTING);
	glDisable(GL_LIGHT0);
	glDisable(GL_DEPTH_TEST); 
	//조명과 z버퍼 끄기
	
	glPopMatrix();


	///////////////////////하반부 시작 ////////////////

	glColor3f(0,0,0);
	glLineWidth(5);
	glBegin(GL_LINES); //오른쪽팔
	glVertex3f(0.5, 0, 0);
	glVertex3f(1.3, 0.5, 0);
	glEnd();


	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, white);
	glLightfv(GL_LIGHT0, GL_SPECULAR, white);
	glEnable(GL_DEPTH_TEST); // z-버퍼 켜기

	glColor3f(0.777, 0.888, 0.999);
	glPushMatrix();
	glTranslatef(0, -0.6, 0);
	glutSolidSphere(0.8, 40, 40);

	glDisable(GL_LIGHTING);
	glDisable(GL_LIGHT0);
	glDisable(GL_DEPTH_TEST);
	//조명과 z버퍼 끄기

	glPopMatrix();



	glColor3f(0, 0, 0);
	glLineWidth(5);
	glBegin(GL_LINES); // 왼쪽팔
	glVertex3f(-0.4, 0, 0);
	glVertex3f(-1, 0.5, 0);
	glEnd();


	glPushMatrix();
	glTranslatef(0, 0.9, 0);
	glScalef(2, 2, 0);
	glBegin(GL_POLYGON);
	glVertex3f(-0.15, 0, 0);
	glVertex3f(-0.2, 0, 0);
	glVertex3f(-0.2, -0.05, 0);
	glVertex3f(0.2, -0.05, 0);
	glVertex3f(0.2, 0, 0);
	glVertex3f(0.15, 0, 0);
	glVertex3f(0.15, 0.2, 0);
	glVertex3f(-0.15, 0.2, 0);

	glEnd();

	glPopMatrix();



	//////////////////하반부 끝////////////////////


	glPushMatrix();

	glTranslatef(0.1, 0, 0);
	glColor3f(0, 0, 0);
	glPushMatrix();
	glTranslatef(0, 0.5, 0);
	glEnable(GL_POINT_SMOOTH);
	glPointSize(5);
	glBegin(GL_POINTS); //눈사람 눈
	glVertex3f(-0.1, 0.05, 0);
	glVertex3f(0.1, 0.05, 0);
	glEnd();


	//눈사람 입
	glPointSize(4);

	glBegin(GL_POINTS);
	glVertex3f(-0.2, -0.18, 0);
	glEnd();
	glBegin(GL_POINTS);
	glVertex3f(-0.1, -0.24, 0);
	glEnd();
	glBegin(GL_POINTS);
	glVertex3f(0, -0.28, 0);
	glEnd();
	glBegin(GL_POINTS);
	glVertex3f(0.1, -0.24, 0);
	glEnd();
	glBegin(GL_POINTS);
	glVertex3f(0.2, -0.18, 0);
	glEnd();

	//눈사람 단추
	glColor3f(0, 0, 0);
	glPointSize(5);
	glBegin(GL_POINTS);
	glVertex3f(0.1, -0.8, 0);
	glVertex3f(0.12, -1.00000003, 0);
	glVertex3f(0.1, -1.2, 0);
	glEnd();



	glColor3f(255/255, 159/255, 63/255);
	glScalef(0.6, 0.5, 0);
	glBegin(GL_POLYGON); //눈사람  코
	glVertex3f(0, -0.1, 0);
	glVertex3f(0.4, -0.2, 0);
	glVertex3f(0, -0.3, 0);
	glEnd();
	
	glPointSize(10);

	glLineWidth(1);
	glPopMatrix();




}

void Tree() {
	glPushMatrix();

	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, green);
	glLightfv(GL_LIGHT0, GL_SPECULAR, white);
	glEnable(GL_DEPTH_TEST);
	//조명 밑 z버퍼 켜기

	glScalef(0.7, 0.7, 0);
	glTranslatef(-2, 3, 0);


	glColor3f(0, 0.5, 0);
	glRotatef(-90, 1, 0, 0);
	glutSolidCone(0.5, 1, 12, 12);
	
	glTranslatef(0,0, 0.3);
	glutSolidCone(0.5, 0.8, 12, 12);

	glTranslatef(0, 0, 0.3);
	glutSolidCone(0.5, 0.6, 12, 12);


	glColor3f(0,0,0);
	glTranslatef(0, 0, -1);
	glScalef(1,1,8);
	glutSolidCube(0.1);


	glDisable(GL_LIGHTING);
	glDisable(GL_LIGHT0);
	glDisable(GL_DEPTH_TEST);
	//조명과 z버퍼 끄기


	glPopMatrix();
}

void House() {
	glPushMatrix();
	glScalef(0.7, 0.7, 0);
	glTranslatef(7, 1.5, 0);
	glColor3f(0.5, 0, 0);
	glBegin(GL_POLYGON);
	glVertex3f(0, 1, 0);
	glVertex3f(-0.6, 0.2, 0);
	glVertex3f(-0.5, 0, 0);
	glVertex3f(0, 0.8, 0);
	glVertex3f(0.5, 0, 0);
	glVertex3f(1.3, 0, 0);
	glVertex3f(1.2, 0.2, 0);
	glVertex3f(0.6, 0.3, 0);
	glEnd();

	glColor3f(0.5, 0.5, 0.5);
	glBegin(GL_POLYGON);
	glVertex3f(-0.5, 0, 0);
	glVertex3f(-0.5,-0.5 , 0);
	glVertex3f(0.5, -0.5, 0);
	glVertex3f(0.5, 0, 0);
	glVertex3f(0, 0.8, 0);
	glEnd();

	glColor3f(0.7, 0.7, 0.7);
	glBegin(GL_POLYGON);
	glVertex3f(0.5, 0, 0);
	glVertex3f(0.5, -0.5, 0);
	glVertex3f(1.2, -0.5, 0);
	glVertex3f(1.2, 0, 0);

	glEnd();


	glPopMatrix();
}

void S() {
	glPushMatrix();
	glScalef(0.7, 0.7, 1);
	//glColor3f(1, 1, 1);
	glLineWidth(2);
	glBegin(GL_LINES);
	glVertex3f(0, 0.1, 0);
	glVertex3f(0, -0.1, 0);
	glVertex3f(0.1, 0, 0);
	glVertex3f(-0.1, 0, 0);
	glVertex3f(0.1, 0.075, 0);
	glVertex3f(-0.1, -0.075, 0);
	glVertex3f(-0.1, 0.075, 0);
	glVertex3f(0.1, -0.075, 0);
	glEnd();
	glPopMatrix();

}
void Snow() {
	
	
	if (gTimeslot%6 == 0) {

		
		glPushMatrix();
		glTranslatef(0, 1, 0);
		S(); //눈송이 한개
		glTranslatef(1,2,0);
		S();
		glTranslatef(1.5, -1, 0);
		S();
		glTranslatef(1.2, -1, 0);
		S();
		glTranslatef(1.2, 2, 0);
		S();
		glPopMatrix();

		glPushMatrix();
		glTranslatef(-1, -1, 0);
		S(); //눈송이 한개
		glTranslatef(1, 2, 0);
		S();
		glTranslatef(1.5, -1, 0);
		S();
		glTranslatef(1.2, -1, 0);
		S();
		glTranslatef(1.2, 2, 0);
		S();

		glPopMatrix();
	}
	if (gTimeslot%6 == 1) {
		glPushMatrix();
		glTranslatef(0, 0.5, 0);
		S(); 
		glTranslatef(1, 2, 0);
		S();
		glTranslatef(1.5, -1, 0);
		S();
		glTranslatef(1.2, -1, 0);
		S();
		glTranslatef(1.2, 2, 0);
		S();

		glPopMatrix();
		glPushMatrix();
		glTranslatef(-1, -0.5, 0);
		S(); //눈송이 한개
		glTranslatef(1, 2, 0);
		S();
		glTranslatef(1.5, -1, 0);
		S();
		glTranslatef(1.2, -1, 0);
		S();
		glTranslatef(1.2, 2, 0);
		S();

		glPopMatrix();
	}

	if (gTimeslot  % 6 == 2) {
		glPushMatrix();
		glTranslatef(0.2, 0, 0);
		S();
		glTranslatef(1, 2, 0);
		S();
		glTranslatef(1.5, -1, 0);
		S();
		glTranslatef(1.2, -1, 0);
		S();
		glTranslatef(1.2, 2, 0);
		S();

		glPopMatrix();
		glPushMatrix();
		glTranslatef(-0.8, -1, 0);
		S(); //눈송이 한개
		glTranslatef(1, 2, 0);
		S();
		glTranslatef(1.5, -1, 0);
		S();
		glTranslatef(1.2, -1, 0);
		S();
		glTranslatef(1.2, 2, 0);
		S();

		glPopMatrix();
	}
	if (gTimeslot % 6 ==  3) {
		glPushMatrix();
		glTranslatef(0.1, -0.5, 0);
		S();
		glTranslatef(1, 2, 0);
		S();
		glTranslatef(1.5, -1, 0);
		S();
		glTranslatef(1.2, -1, 0);
		S();
		glTranslatef(1.2, 2, 0);
		S();

		glPopMatrix();
		glPushMatrix();
		glTranslatef(-0.9, -1.5, 0);
		S(); //눈송이 한개
		glTranslatef(1, 2, 0);
		S();
		glTranslatef(1.5, -1, 0);
		S();
		glTranslatef(1.2, -1, 0);
		S();
		glTranslatef(1.2, 2, 0);
		S();

		glPopMatrix();
	}
	if (gTimeslot % 6 == 4) {
		glPushMatrix();
		glTranslatef(0, -1, 0);
		S();
		glTranslatef(1, 2, 0);
		S();
		glTranslatef(1.5, -1, 0);
		S();
		glTranslatef(1.2, -1, 0);
		S();
		glTranslatef(1.2, 2, 0);
		S();

		glPopMatrix();
		glPushMatrix();
		glTranslatef(-1, -2, 0);
		S(); //눈송이 한개
		glTranslatef(1, 2, 0);
		S();
		glTranslatef(1.5, -1, 0);
		S();
		glTranslatef(1.2, -1, 0);
		S();
		glTranslatef(1.2, 2, 0);
		S();

		glPopMatrix();

	}
	if (gTimeslot % 6 == 5) {
		glPushMatrix();
		glTranslatef(-0.1, -1.5, 0);
		S();
		glTranslatef(1, 2, 0);
		S();
		glTranslatef(1.5, -1, 0);
		S();
		glTranslatef(1.2, -1, 0);
		S();
		glTranslatef(1.2, 2, 0);
		S();

		glPopMatrix();
		glPushMatrix();
		glTranslatef(-1.1, -2.5, 0);
		S(); //눈송이 한개
		glTranslatef(1, 2, 0);
		S();
		glTranslatef(1.5, -1, 0);
		S();
		glTranslatef(1.2, -1, 0);
		S();
		glTranslatef(1.2, 2, 0);
		S();

		glPopMatrix();

	}

}

void SnowTimer(int Value) {

	gTimeslot = (gTimeslot + 1) % 70; //%100이면 0~99 반복, 130이면 0~129반복

	glutPostRedisplay();
	glutTimerFunc(250, SnowTimer, 1);

}

//꽃 하나
void F() {

	glPushMatrix();
	glColor3f(0, 128/255, 0);
	glLineWidth(1);
	glBegin(GL_LINES);
	glVertex3f(0.04, 0, 0);
	glVertex3f(0.04, -0.3, 0);

	glEnd();

	MyLightInit();

	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, white);
	glLightfv(GL_LIGHT0, GL_SPECULAR, white);
	glEnable(GL_DEPTH_TEST);
	//조명 밑 z버퍼 켜기

	glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, yellow);
	glMaterialfv(GL_FRONT, GL_SPECULAR, white);
	glMaterialfv(GL_FRONT, GL_SHININESS, polished);

	glPushMatrix();
	glutSolidSphere(0.02, 40, 40);
	glTranslatef(0.08, 0, 0);
	glutSolidSphere(0.02, 40, 40);
	glTranslatef(-0.04, 0.05, 0);
	glutSolidSphere(0.02, 40, 40);
	glPopMatrix();

	glDisable(GL_LIGHTING);
	glDisable(GL_LIGHT0);
	glDisable(GL_DEPTH_TEST);
	//조명과 z버퍼 끄기

	
	glPopMatrix();

}
void Flower() {
	glPushMatrix();
	
	glPushMatrix();
	glTranslatef(-6.5, -1, 0);
	for (int i = 0; i < 50; i++) {
		glTranslatef(0.3, 0, 0);
		glPushMatrix();
		F();
		glTranslatef(0.1, 0.1, 0);
		F();
		glTranslatef(-0.2, 0, 0);
		F();
		glPopMatrix();
	}
	glPopMatrix();
	glPushMatrix();
	glTranslatef(-6.5, -1.2, 0);
	for (int i = 0; i < 50; i++) {
		glTranslatef(0.3, 0, 0);
		glPushMatrix();
		F();
		glTranslatef(0.1, 0.1, 0);
		F();
		glTranslatef(-0.2, 0, 0);
		F();
		glPopMatrix();
	}
	glPopMatrix();
	glPushMatrix();
	glTranslatef(-6.5, -1.4, 0);
	for (int i = 0; i < 50; i++) {
		glTranslatef(0.3, 0, 0);
		glPushMatrix();
		F();
		glTranslatef(0.1, 0.1, 0);
		F();
		glTranslatef(-0.2, 0, 0);
		F();
		glPopMatrix();
	}
	glPopMatrix();
	glPushMatrix();
	glTranslatef(-6.5, -1.6, 0);
	for (int i = 0; i < 50; i++) {
		glTranslatef(0.3, 0, 0);
		glPushMatrix();
		F();
		glTranslatef(0.1, 0.1, 0);
		F();
		glTranslatef(-0.2, 0, 0);
		F();
		glPopMatrix();
	}
	glPopMatrix();
	glPushMatrix();
	glTranslatef(-6.5, -1.8, 0);
	for (int i = 0; i < 50; i++) {
		glTranslatef(0.3, 0, 0);
		glPushMatrix();
		F();
		glTranslatef(0.1, 0.1, 0);
		F();
		glTranslatef(-0.2, 0, 0);
		F();
		glPopMatrix();
	}
	glPopMatrix();
	glPushMatrix();
	glTranslatef(-6.5, -2, 0);
	for (int i = 0; i < 50; i++) {
		glTranslatef(0.3, 0, 0);
		glPushMatrix();
		F();
		glTranslatef(0.1, 0.1, 0);
		F();
		glTranslatef(-0.2, 0, 0);
		F();
		glPopMatrix();
	}
	glPopMatrix();
	glPushMatrix();
	glTranslatef(-6.5, -2.2, 0);
	for (int i = 0; i < 50; i++) {
		glTranslatef(0.3, 0, 0);
		glPushMatrix();
		F();
		glTranslatef(0.1, 0.1, 0);
		F();
		glTranslatef(-0.2, 0, 0);
		F();
		glPopMatrix();
	}
	glPopMatrix();
	glPushMatrix();
	glTranslatef(-6.5, -2.4, 0);
	for (int i = 0; i < 50; i++) {
		glTranslatef(0.3, 0, 0);
		glPushMatrix();
		F();
		glTranslatef(0.1, 0.1, 0);
		F();
		glTranslatef(-0.2, 0, 0);
		F();
		glPopMatrix();
	}
	glPopMatrix();
	glPushMatrix();
	glTranslatef(-6.5, -2.6, 0);
	for (int i = 0; i < 50; i++) {
		glTranslatef(0.3, 0, 0);
		glPushMatrix();
		F();
		glTranslatef(0.1, 0.1, 0);
		F();
		glTranslatef(-0.2, 0, 0);
		F();
		glPopMatrix();
	}
	glPopMatrix();
	glPushMatrix();
	glTranslatef(-6.5, -2.8, 0);
	for (int i = 0; i < 50; i++) {
		glTranslatef(0.3, 0, 0);
		glPushMatrix();
		F();
		glTranslatef(0.1, 0.1, 0);
		F();
		glTranslatef(-0.2, 0, 0);
		F();
		glPopMatrix();
	}
	glPopMatrix();


	glPopMatrix();
}
void Mountain() {
	glPushMatrix();

	glTranslatef(1, -1, 0);

	//산 1
	glTranslatef(-2, -0.5, 0);
	glColor3f(0, 0.7, 0.5);
	glRotatef(-90, 1, 0, 0);
	glutSolidCone(3.5, 3, 40,40);

	glTranslatef(3, 0, -0.5);
	glutSolidCone(3.5, 3, 40, 40);


	glPopMatrix();
}
void Butterfly1() {

	glPushMatrix();

	glTranslatef(-0.05, -0.02, 0);
	glRotatef(10, 0, 0, 1);
	glColor3f(0.78324, 0.40348, 0.045);
	glBegin(GL_POLYGON);
	glVertex3f(0, 0, 0);
	glVertex3f(0.2, 0.1, 0);
	glVertex3f(0.35, -0.05, 0);
	glEnd();
	glTranslatef(0.03, 0, 0);
	glRotatef(30, 0, 0, 1);
	glScalef(1, 3, 1);
	glColor3f(0.882352, 0.50222, 0.14509);
	glBegin(GL_POLYGON);
	glVertex3f(0, 0, 0);
	glVertex3f(0.2, 0.1, 0);
	glVertex3f(0.35, -0.05, 0);
	glEnd();
	glPopMatrix();

	glPushMatrix();
	//나비몸통
	glColor3f(1, 1, 1);
	glRotatef(30, 0,0,1);
	glScalef(1, 3, 1);
	glutSolidSphere(0.05, 40, 40);
	//나비더듬이
	glColor3f(0, 0, 0);
	glBegin(GL_LINES);
	glVertex3f(-0.02, 0.05, 0);
	glVertex3f(-0.01, 0.1, 0);
	glVertex3f(0.01, 0.05, 0);
	glVertex3f(0.03, 0.1, 0);
	glEnd();
	
	glPointSize(3);
	glBegin(GL_POINTS);
	glVertex3f(-0.01, 0.1, 0);
	glVertex3f(0.03, 0.1, 0);
	glEnd();


	glPopMatrix();
}

void Butterfly2() {
	//나비 날개
	glPushMatrix();


	glTranslatef(0.03, 0, 0);
	glRotatef(30, 0, 0, 1);
	glScalef(1, 3, 1);
	glColor3f(0.882352, 0.50222, 0.14509);
	glBegin(GL_POLYGON);
	glVertex3f(0, 0, 0);
	glVertex3f(0.2, 0.1, 0);
	glVertex3f(0.35, -0.05, 0);
	glEnd();

	glBegin(GL_POLYGON);
	glVertex3f(0, 0, 0);
	glVertex3f(0.-0.2, 0.1, 0);
	glVertex3f(0.-0.35, -0.05, 0);
	glEnd();


	glPopMatrix();
	glPushMatrix();
	//나비몸통
	glColor3f(1, 1, 1);
	glRotatef(30, 0, 0, 1);
	glScalef(1, 3, 1);
	glutSolidSphere(0.05, 40, 40);
	//나비더듬이
	glColor3f(0, 0, 0);
	glBegin(GL_LINES);
	glVertex3f(-0.02, 0.05, 0);
	glVertex3f(-0.01, 0.1, 0);
	glVertex3f(0.01, 0.05, 0);
	glVertex3f(0.03, 0.1, 0);
	glEnd();

	glPointSize(3);
	glBegin(GL_POINTS);
	glVertex3f(-0.01, 0.1, 0);
	glVertex3f(0.03, 0.1, 0);
	glEnd();


	glPopMatrix();

}
void Fly() {

	if (gTimeslot % 6 == 0) {
		glPushMatrix();
		glTranslatef(3, 0, 0);
		Butterfly1();
		glPopMatrix();
	}
	else if (gTimeslot % 6 == 1) {
		glPushMatrix();
		glTranslatef(2.5, -0.1, 0);
		Butterfly2();
		glPopMatrix();
	}

	else if (gTimeslot % 6 == 2) {
		glPushMatrix();
		glTranslatef(2.0, -0.2, 0);
		Butterfly1();
		glPopMatrix();
	}

	else if (gTimeslot % 6 == 3) {
		glPushMatrix();
		glTranslatef(1.5, -0.3, 0);
		Butterfly2();
		glPopMatrix();
	}
	else if (gTimeslot % 6 == 4) {
		glPushMatrix();
		glTranslatef(1, -0.4, 0);
		Butterfly1();
		glPopMatrix();
	}

	else if (gTimeslot % 6 == 5) {
		glPushMatrix();
		glTranslatef(0.5, -0.5, 0);
		Butterfly2();
		glPopMatrix();
	}


}
void Cloud() {
	
	GLfloat Size[2], Angle;

	glColor3f(0.94, 0.92, 0.996);
	glPushMatrix();
	glScalef(1.3, 0.7, 1);
	glTranslatef(-2.5, 3.5, 0);

	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.2 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.4, 0.2, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.6 * cos(Angle), 0.3 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.3, -0.2, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.6 * cos(Angle), 0.3 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.3, 0.3, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.6 * cos(Angle), 0.3 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.4, -0.2, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.2 * sin(Angle), 0.0);
	glEnd();

	glTranslatef(2.5, -0.3, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.6 * cos(Angle), 0.2 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.4, 0.2, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.3 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.3, -0.2, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.3 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.3, 0.3, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.3 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.45, -0.2, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.2 * sin(Angle), 0.0);
	glEnd();


	glPopMatrix();
}
void SpringTimer(int Value) {


	gTimeslot = (gTimeslot + 1) % 80; //%100이면 0~99 반복, 130이면 0~129반복

	glutPostRedisplay();
	glutTimerFunc(250, SpringTimer, 1);
}

void Water() {
	
	
	//밝은파랑
	glColor3f(0.49411765, 0.7372549, 0.9827451);
	glBegin(GL_POLYGON);
	glVertex3f(-12, -8, 0);
	glVertex3f(-12, -0.3, 0);
	glVertex3f(12, -0.3, 0);
	glVertex3f(12, -0.3, 0);
	glEnd();
	//더 밝은파랑
	glColor3f(0.69411765, 0.8372549, 0.9827451);
	glBegin(GL_POLYGON);
	glVertex3f(-12, -8, 0);
	glVertex3f(-12, -0.4, 0);
	glVertex3f(12, -0.4, 0);
	glVertex3f(12, -0.4, 0);
	glEnd();
	//흰색
	glColor3f(1,1,1);
	glBegin(GL_POLYGON);
	glVertex3f(-12, -8, 0);
	glVertex3f(-12, -0.5, 0);
	glVertex3f(12, -0.5, 0);
	glVertex3f(12, -0.5, 0);
	glEnd();
	//모래 황토색
	glColor3f(0.9216, 0.6588, 0.1373);
	glBegin(GL_POLYGON);
	glVertex3f(-12, -8, 0);
	glVertex3f(-12, -1, 0);
	glVertex3f(12, -1, 0);
	glVertex3f(12, -1, 0);
	glEnd();


}
void Pool() {
	if (gTimeslot % 4 == 0) {
		glPushMatrix();
		glTranslatef(2, 2, 0);
		Bird1();
		glTranslatef(1, -0.5, 0);
		glScalef(0.8, 0.8, 1);
		Bird2();
		glPopMatrix();
		glPushMatrix();
		glTranslatef(0, 0, 0);
		Water();
		glPopMatrix();
	}
	if (gTimeslot % 4 == 1) {
		glPushMatrix();
		glTranslatef(2, 2, 0);
		Bird2();
		glTranslatef(1, -0.5, 0);
		glScalef(0.8, 0.8, 1);
		Bird1();
		glPopMatrix();
		glPushMatrix();
		glTranslatef(0, -0.2, 0);
		Water();
		glPopMatrix();
	}
	if (gTimeslot % 4 == 2) {
		glPushMatrix();
		glTranslatef(2, 2, 0);
		Bird1();
		glTranslatef(1, -0.5, 0);
		glScalef(0.8, 0.8, 1);
		Bird2();
		glPopMatrix();
		glPushMatrix();
		glTranslatef(0, -0.4, 0);
		Water();
		glPopMatrix();
	}
	if (gTimeslot % 4 == 3) {
		glPushMatrix();
		glTranslatef(2, 2, 0);
		Bird2();
		glTranslatef(1, -0.5, 0);
		glScalef(0.8, 0.8, 1);
		Bird1();
		glPopMatrix();
		glPushMatrix();
		glTranslatef(0, -0.6, 0);
		Water();
		glPopMatrix();
	}
}
void SummerTimer(int Value) {
	gTimeslot = (gTimeslot + 1) % 80; //%100이면 0~99 반복, 130이면 0~129반복

	glutPostRedisplay();
	glutTimerFunc(250, SpringTimer, 1);
}
void Parasol() {
	glPushMatrix();
	
	glTranslatef(2.5, -0.2, 0);
	glRotatef(-20, 0, 0, 1);
	glScalef(1.5,1, 1);
	glPushMatrix();
	glLineWidth(5);
	glColor3f(0.6216, 0.3588, 0.0373); //갈색
	glBegin(GL_LINES);
	glVertex3f(0, -2,0);
	glVertex3f(0, 0, 0);
	glEnd();
	glPopMatrix();

	glColor3f(1, 0, 0);//red
	glBegin(GL_POLYGON);
	glVertex3f(-1, 0, 0);
	glVertex3f(-0.75,0.5, 0);
	glVertex3f(0, 1, 0);
	glVertex3f(0.75, 0.5, 0);
	glVertex3f(1, 0, 0);
	glEnd();
	glColor3f(1, 1,1);//white1
	glBegin(GL_POLYGON);
	glVertex3f(-0.5, 0,0);
	glVertex3f(-0.3, 0.5, 0);
	glVertex3f(0, 1, 0);
	glVertex3f(0, 0, 0);
	glEnd();
	glColor3f(1, 1, 1);//white2
	glBegin(GL_POLYGON);
	glVertex3f(1, 0, 0);
	glVertex3f(0.5, 0.5, 0);
	glVertex3f(0, 1, 0);
	glVertex3f(0.5, 0,0);
	glEnd();

	glColor3f(1, 1, 1);//white3
	glBegin(GL_POLYGON);
	glVertex3f(-1, 0, 0);
	glVertex3f(-0.75, 0.5, 0);
	glVertex3f(0, 1, 0);
	glVertex3f(-1, 0, 0);
	glEnd();
	glColor3f(0.5, 0.5, 0.5);//gray
	glBegin(GL_POLYGON);
	glVertex3f(-1, 0, 0);
	glVertex3f(1, 0, 0);
	glVertex3f(0, -0.1, 0);

	glEnd();



	glPopMatrix();
}
void Ball() {
	
	glPushMatrix();
	glTranslatef(1, -2, 0);
	glColor3f(1, 1, 0);
	glutSolidSphere(0.2 ,40, 40);


	glPopMatrix();
}

void Chair() {
	glPushMatrix();
	glTranslatef(2.8, -1.8, 0);
	glColor3f(0.6216, 0.3588, 0.0373); //갈색
	glBegin(GL_LINES);
	glVertex3f(-0.5, -0.5, 0);
	glVertex3f(0.3, 1, 0);
	glVertex3f(0.4, -0.5, 0);
	glVertex3f(1.2, 1, 0);
	glVertex3f(0.65, 0, 0);
	glVertex3f(0.9, -0.4, 0);

	glEnd();

	glColor3f(0.732,1,0.9879); //흰색
	glBegin(GL_POLYGON);
	glVertex3f(-0.1, 0.3, 0);

	glVertex3f(0.32, 1, 0);
	glVertex3f(1.18, 1, 0);
	glVertex3f(0.63, -0.02, 0);
	glVertex3f(0, -0.5, 0);
	glVertex3f(-0.7, -0.1, 0);
	glVertex3f(0.3 , 0 ,0);

	
	glEnd();

	glPopMatrix();
}
void Sun() {
	glPushMatrix();
	MyLightInit();

	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, orange);
	glLightfv(GL_LIGHT0, GL_SPECULAR, white);
	glEnable(GL_DEPTH_TEST);
	//조명 밑 z버퍼 켜기

	glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, white);
	glMaterialfv(GL_FRONT, GL_SPECULAR, white);
	glMaterialfv(GL_FRONT, GL_SHININESS, polished);


	glTranslatef(-3, 2.3, 0);
	glutSolidSphere(0.4,40,40); //태양


	glDisable(GL_LIGHTING);
	glDisable(GL_LIGHT0);
	glDisable(GL_DEPTH_TEST);
	//조명과 z버퍼 끄기
	glPopMatrix();

}

void Bird1() {
	glPushMatrix();
	glScalef(0.5, 0.5, 1);
	glColor3f(1, 1, 1); //갈매기흰색
	glBegin(GL_POLYGON);
	glVertex3f(0,0.2, 0);
	glVertex3f(-0.5, 0.5, 0);
	glVertex3f(-0.7, 0.4, 0);
	glVertex3f(-1, 0, 0);
	glVertex3f(-0.5, 0.2, 0);
	glVertex3f(0, 0, 0);
	glVertex3f(0.5, 0.2, 0);
	glVertex3f(1, 0, 0);
	glVertex3f(0.7, 0.4, 0);
	glVertex3f(0.5, 0.5, 0);

	glEnd();


	glColor3f(0,0,0); //갈매기검은색
	glBegin(GL_POLYGON);
	glVertex3f(-0.7, 0.4, 0);
	glVertex3f(-1, 0, 0);
	glVertex3f(-0.5, 0.2, 0);
	glEnd();


	glBegin(GL_POLYGON);
	glVertex3f(0.5, 0.2, 0);
	glVertex3f(1, 0, 0);
	glVertex3f(0.7, 0.4 ,0);

	glEnd();
	glPopMatrix();
}

void Bird2() {
	glPushMatrix();
	glRotatef(180, 0, 0, 1);
	glScalef(0.5, 0.5, 1);
	glColor3f(1, 1, 1); //갈매기흰색
	glBegin(GL_POLYGON);
	glVertex3f(0, 0.2, 0);
	glVertex3f(-0.5, 0.5, 0);
	glVertex3f(-0.7, 0.4, 0);
	glVertex3f(-1, 0, 0);
	glVertex3f(-0.5, 0.2, 0);
	glVertex3f(0, 0, 0);
	glVertex3f(0.5, 0.2, 0);
	glVertex3f(1, 0, 0);
	glVertex3f(0.7, 0.4, 0);
	glVertex3f(0.5, 0.5, 0);

	glEnd();


	glColor3f(0, 0, 0); //갈매기검은색
	glBegin(GL_POLYGON);
	glVertex3f(-0.7, 0.4, 0);
	glVertex3f(-1, 0, 0);
	glVertex3f(-0.5, 0.2, 0);
	glEnd();


	glBegin(GL_POLYGON);
	glVertex3f(0.5, 0.2, 0);
	glVertex3f(1, 0, 0);
	glVertex3f(0.7, 0.4, 0);

	glEnd();
	glPopMatrix();

}

void Star() {
	glPushMatrix();
	glTranslatef(-2, -2, 0);

	glColor3f(1, 0.3, 0.4);
	glRotatef(30, 0, 0, 1);
	glScalef(0.3, 0.3, 1);
	glBegin(GL_POLYGON); //별똥별 별
	glVertex3f(0, -0.5, 0);
	glVertex3f(0.5, -0.8, 0);
	glVertex3f(0.3, -0.3, 0);
	glVertex3f(0.8, 0.1, 0);
	glVertex3f(0.2, 0.1, 0);
	glVertex3f(0, 0.8, 0);
	glVertex3f(-0.2, 0.1, 0);
	glVertex3f(-0.8, 0.1, 0);
	glVertex3f(-0.3, -0.3, 0);
	glVertex3f(-0.5, -0.8, 0);
	glEnd();

	glTranslatef(-2, -0.2, 0);

	glColor3f(1, 0.3, 0.2);
	glRotatef(30, 0, 0, 1);
	glScalef(1, 0.8, 1);
	glBegin(GL_POLYGON); //별똥별 별
	glVertex3f(0, -0.5, 0);
	glVertex3f(0.5, -0.8, 0);
	glVertex3f(0.3, -0.3, 0);
	glVertex3f(0.8, 0.1, 0);
	glVertex3f(0.2, 0.1, 0);
	glVertex3f(0, 0.8, 0);
	glVertex3f(-0.2, 0.1, 0);
	glVertex3f(-0.8, 0.1, 0);
	glVertex3f(-0.3, -0.3, 0);
	glVertex3f(-0.5, -0.8, 0);
	glEnd();

	glPopMatrix();
}

//단풍
void Leaf_Orange() {
	glPushMatrix();
	glTranslatef(-2, -2, 0);

	glColor3f(0.95294118, 0.45098039, 0.12941176); //주황 단풍
	glRotatef(30, 0, 0, 1);
	glScalef(0.2, 0.2, 1);
	glBegin(GL_POLYGON); //별똥별 별
	glVertex3f(0, -0.5, 0);
	glVertex3f(0.5, -0.8, 0);
	glVertex3f(0.3, -0.3, 0);
	glVertex3f(0.8, 0.1, 0);
	glVertex3f(0.2, 0.1, 0);
	glVertex3f(0, 0.8, 0);
	glVertex3f(-0.2, 0.1, 0);
	glVertex3f(-0.8, 0.1, 0);
	glVertex3f(-0.3, -0.3, 0);
	glVertex3f(-0.5, -0.8, 0);
	glEnd();

	glPopMatrix();


}
void Leaf_Red() {
	glPushMatrix();
	glTranslatef(-2, -2, 0);

	glColor3f(0.95294118, 0.25098039, 0.12941176); //빨강 단풍
	glRotatef(30, 0, 0, 1);
	glScalef(0.2, 0.2, 1);
	glBegin(GL_POLYGON); //별똥별 별
	glVertex3f(0, -0.5, 0);
	glVertex3f(0.5, -0.8, 0);
	glVertex3f(0.3, -0.3, 0);
	glVertex3f(0.8, 0.1, 0);
	glVertex3f(0.2, 0.1, 0);
	glVertex3f(0, 0.8, 0);
	glVertex3f(-0.2, 0.1, 0);
	glVertex3f(-0.8, 0.1, 0);
	glVertex3f(-0.3, -0.3, 0);
	glVertex3f(-0.5, -0.8, 0);
	glEnd();

	glPopMatrix();



}
//잎 떨어짐
void Fall() {
	if (gTimeslot % 7 == 0) {
		glPushMatrix();
		glTranslatef(4, 3, 0);
		Leaf_Orange();
		glPopMatrix();
		glPushMatrix();
		glTranslatef(-0.5, 2.5, 0);
		Leaf_Red();
		glPopMatrix();
	}
	else if (gTimeslot % 7 == 1) {
		glPushMatrix();
		glTranslatef(3.8, 2.8, 0);
		Leaf_Orange();
		glPopMatrix();
		glPushMatrix();
		glTranslatef(-0.3, 2.3, 0);
		Leaf_Red();
		glPopMatrix();
	}
	else if (gTimeslot % 7 == 2) {
		glPushMatrix();
		glTranslatef(4, 2.6, 0);
		Leaf_Orange();
		glPopMatrix();
		glPushMatrix();
		glTranslatef(-0.5, 2.1, 0);
		Leaf_Red();
		glPopMatrix();
	}
	else if (gTimeslot % 7 == 3) {
		glPushMatrix();
		glTranslatef(3.8, 2.4, 0);
		Leaf_Orange();
		glPopMatrix();
		glPushMatrix();
		glTranslatef(-0.3, 1.9, 0);
		Leaf_Red();
		glPopMatrix();
	}
	else if (gTimeslot % 7 == 4) {
		glPushMatrix();
		glTranslatef(4, 2.2, 0);
		Leaf_Orange();
		glPopMatrix();
		glPushMatrix();
		glTranslatef(-0.5, 1.7, 0);
		Leaf_Red();
		glPopMatrix();
	}
}
void Autumn_Tree1() {
	glPushMatrix();
	glTranslatef(0, 1.7, 0);
	glRotatef(-45, 1, 0,0);

	glColor3f(0.95294118, 0.45098039, 0.12941176); //주황 단풍
	glScalef(1.8, 2, 1);
	glutSolidCone(0.5,1, 40,40);

	glPopMatrix();

	glPushMatrix();
	glLineWidth(5);
	glColor3f(0.4216, 0.2588, 0.0373);
	glBegin(GL_LINES);
	glVertex3f(0, 0, 0);
	glVertex3f(0, 2, 0);
	glVertex3f(-0.6, 1.8, 0);
	glVertex3f(0, 1.3, 0);
	glVertex3f(0, 1.3, 0);
	glVertex3f(0.5, 1.7, 0);
	
	glEnd();

	glPopMatrix();

}
void Autumn_Tree2() {
	glPushMatrix();
	glTranslatef(0, 1.7, 0);
	glRotatef(-45, 1, 0, 0);

	glColor3f(0.95294118, 0.25098039, 0.12941176); //빨강 단풍
	glScalef(1.8, 2, 1);
	glutSolidCone(0.5, 1, 40, 40);

	glPopMatrix();

	glPushMatrix();
	glLineWidth(5);
	glColor3f(0.4216, 0.2588, 0.0373);
	glBegin(GL_LINES);
	glVertex3f(0, 0, 0);
	glVertex3f(0, 2, 0);
	glVertex3f(-0.6, 1.8, 0);
	glVertex3f(0, 1.3, 0);
	glVertex3f(0, 1.3, 0);
	glVertex3f(0.5, 1.7, 0);

	glEnd();

	glPopMatrix();

}


void Autumn_Cloud() {

	GLfloat Size[2], Angle;

	glColor3f(0.94, 0.92, 0.996);
	glPushMatrix();
	glScalef(1.3, 0.7, 1);
	glTranslatef(-2.5, 3.5, 0);

	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.2 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.4, 0.2, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.6 * cos(Angle), 0.3 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.3, -0.2, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.6 * cos(Angle), 0.3 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.3, 0.3, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.6 * cos(Angle), 0.3 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.4, -0.2, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.2 * sin(Angle), 0.0);
	glEnd();

	glTranslatef(2.5, -0.3, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.6 * cos(Angle), 0.2 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.4, 0.2, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.3 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.3, -0.2, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.3 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.3, 0.3, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.3 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.45, -0.2, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.2 * sin(Angle), 0.0);
	glEnd();


	glScalef(1, 2, 1);
	glTranslatef(-4, -1.5, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.6 * cos(Angle), 0.2 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.4, 0.2, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.3 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.3, -0.2, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.3 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.3, 0.3, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.3 * sin(Angle), 0.0);
	glEnd();
	glTranslatef(0.45, -0.2, 0);
	glBegin(GL_POLYGON); //구름
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.2 * sin(Angle), 0.0);
	glEnd();



	glPopMatrix();

}
//코스모스 한송이
void C() {

	glPushMatrix();// push1

	glLineWidth(1);
	glColor3f(0.1, 0.5, 0);
	glBegin(GL_LINES);
	//가운데
	glVertex3f(0.05, -0.1, 0);
	glVertex3f(0.05, -0.5, 0);
	
	//왼쪽
	glVertex3f(-0.25, -0.1, 0);
	glVertex3f(0.05, -0.5, 0);
	
	//오른쪽
	glVertex3f(0.33, 0.1, 0);
	glVertex3f(0.05, -0.5, 0);
	
	glEnd();

	
	glPushMatrix();
	glColor3f(0.84705882, 0.24705882, 0.3843213);//진분홍 
	glTranslatef(-0.2, 0.05, 0);
	glutSolidSphere(0.04, 40, 40);
	glTranslatef(0, -0.1, 0);
	glutSolidSphere(0.04, 40, 40);
	glTranslatef(-0.1, 0, 0);
	glutSolidSphere(0.04, 40, 40);
	glTranslatef(0, 0.1, 0);
	glutSolidSphere(0.04, 40, 40);
	glColor3f(1, 1, 0);
	glTranslatef(0.05, -0.05, 0);
	glutSolidSphere(0.03, 40, 40);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0.3, 0.1, 0);
	glColor3f(1, 0.7252902, 0.84705882);//핑크 
	glTranslatef(0.05, 0.05, 0);
	glutSolidSphere(0.04, 40, 40);
	glTranslatef(0, -0.1, 0);
	glutSolidSphere(0.04, 40, 40);
	glTranslatef(-0.1, 0, 0);
	glutSolidSphere(0.04, 40, 40);
	glTranslatef(0, 0.1, 0);
	glutSolidSphere(0.04, 40, 40);
	glColor3f(1, 1, 0);
	glTranslatef(0.05, -0.05, 0);
	glutSolidSphere(0.03, 40, 40);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0.15, -0.1, 0);
	glColor3f(1, 1, 1);//흰색
	glTranslatef(-0.05, 0.05, 0);
	glutSolidSphere(0.04, 40, 40);
	glTranslatef(0, -0.1, 0);
	glutSolidSphere(0.04, 40, 40);
	glTranslatef(-0.1, 0, 0);
	glutSolidSphere(0.04, 40, 40);
	glTranslatef(0, 0.1, 0);
	glutSolidSphere(0.04, 40, 40);
	glColor3f(1, 1, 0);
	glTranslatef(0.05, -0.05, 0);
	glutSolidSphere(0.03, 40, 40);
	glPopMatrix();


	glPopMatrix(); //pop1
}
void Cosmos() {
	
	
	glPushMatrix();
	glTranslatef(-6.5, -1, 0);
	for (int i = 0; i < 50; i++) {
		glTranslatef(1, 0, 0);
		glPushMatrix();
		C();
		glPopMatrix();
	}
	glPopMatrix();
	glPushMatrix();
	glTranslatef(-6.5, -1.3, 0);
	for (int i = 0; i < 50; i++) {
		glTranslatef(1.5, 0, 0);
		glPushMatrix();
		C();
		glPopMatrix();
	}
	glPopMatrix();
	glPushMatrix();
	glTranslatef(-6.5, -1.6, 0);
	for (int i = 0; i < 50; i++) {
		glTranslatef(1, 0, 0);
		glPushMatrix();
		C();
		glPopMatrix();
	}
	glPopMatrix();
	

}
void MyReshape(int NewWidth, int NewHeight) {

	glViewport(0, 0, NewWidth, NewHeight);
	GLfloat WidthFactor = (GLfloat)NewWidth / (GLfloat)WIN_WIDTH;
	GLfloat HeightFactor = (GLfloat)NewHeight / (GLfloat)WIN_HEIGHT;

	gNewWidth = NewWidth, gNewHeight = NewHeight;
	gWidthFactor = WidthFactor, gHeightFactor = HeightFactor;

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	//glOrtho(-4.0 * WidthFactor, 4.0 * WidthFactor, -3.0 * HeightFactor, 3.0 * HeightFactor, 1,9);
	gluPerspective(65, (GLfloat)NewWidth / (GLfloat)NewHeight, 1, 50); //원근투영 -1~-50

} // MyReshape



void MyInit() {
	glClearColor(1.0, 1.0, 1.0, 1.0);


} // MyInit


int main(int argc, char** argv) {

	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
	glutInitWindowSize(WIN_WIDTH, WIN_HEIGHT);
	glutInitWindowPosition(150, 0);
	glutCreateWindow("Season");
	MyInit();
//	MyLightInit();
	glutDisplayFunc(MyDisplay);
	glutReshapeFunc(MyReshape);
	glutTimerFunc(250, SnowTimer, 1);
	glutMainLoop();
	return 0;
}
