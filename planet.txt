/*
(1) 빨간행성 삭제, 파란 행성은 위치 우측으로
(2) 광원2개이므로, 위치배열 변수도 2개 선언 (위치는 원점)
(3) 실제 light0 위치도 조정, 서비스용 하늘색 동그라미 위치도 조정
   --> display함수에서  glTranslatef(-5,3,0) 하나 추가함으로써 완료
(4) push/pop 부분 복사 후 위치조정, light0대신 light1으로 바꿔주고
	배열변수명도 pos0에서 pos1로 바꿔주고 동그라미 색상도 바꿔주고
(5) glEnable함수에서 0번조명외에도 1번조명 켜주기

*/

#include <glut.h>
#include<math.h>
#define Pi 3.14
GLint gTheta = 0;
GLint gTheta_minute = 0;

GLdouble Angle2 = 0;

int window_width = 1200;
int window_height = 900;

const GLfloat red[] = { 0.8f, 0.0, 0.0, 1.0 };
const GLfloat blue[] = { 0.0, 0.2f, 1.0, 1.0 };
const GLfloat white[] = { 1.0, 1.0, 1.0, 1.0 };
const GLfloat black[] = { 0.0, 0.0, 0.0, 1.0 };
const GLfloat polished[] = { 100.0 };
const GLfloat dull[] = { 0.0 };
const GLfloat light_pos0[] = { 0.0, 0.0, 0.0, 1.0 };
const GLfloat light_pos1[] = { 0.0, 0.0, 0.0, 1.0 };


GLfloat move_y = 0.0;
GLfloat move_z = 0.0;
GLfloat const_att = 1.0;

void MyDisplay() {



	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	glShadeModel(GL_SMOOTH);

	glTranslatef(0.0, 0.0, -20.0);

	glPushMatrix();
	glTranslatef(7,0, 0); //초기 위치
	glTranslatef(0.0, move_y, move_z);
	glLightf(GL_LIGHT0, GL_CONSTANT_ATTENUATION, const_att);
	glLightfv(GL_LIGHT0, GL_POSITION, light_pos0);

	glDisable(GL_LIGHTING);
	glColor3f(1,1,0); //노란색
	glutSolidSphere(0.1, 10, 10); //중간  작은 동그라미
	glEnable(GL_LIGHTING);
	glPopMatrix();



	glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, red);
	glMaterialfv(GL_FRONT, GL_SPECULAR, white);
	glMaterialfv(GL_FRONT, GL_SHININESS, polished);
	glutSolidSphere(3.0, 40, 40); //빨간행성

	glPushMatrix();

	glRotatef(gTheta_minute, 1, 0, 0);
	glTranslatef(0.0, 8.0, 0.0);
	glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, blue);
	glMaterialfv(GL_FRONT, GL_SPECULAR, white);
	glMaterialfv(GL_FRONT, GL_SHININESS, polished);
	glutSolidSphere(1.0, 40, 40); //돌고있는 파란행성
	
	glPopMatrix();



	glutSwapBuffers();
	glFlush();
}

void Mouse_Movement(int x, int y) {
	move_z = (10.0 * x) / window_width;
	move_y = 5.0 - (10.0 * y) / window_height;

	glutPostRedisplay();
}

void MyReshape(int w, int h) {
	window_width = w;
	window_height = h;

	glViewport(0, 0, window_width, window_height);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	gluPerspective(60, GLfloat(window_width) / GLfloat(window_height), 1.0, 60.0);
	glutPostRedisplay();
}

void MySpecial(int key, int x, int y) {
	if (key == GLUT_KEY_LEFT) {
		const_att *= 0.9f;
	}
	else if (key == GLUT_KEY_RIGHT) {
		const_att /= 0.9f;
	}

	glutPostRedisplay();
}

void MyInit() {

	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, white);
	glLightfv(GL_LIGHT0, GL_SPECULAR, white);

	glEnable(GL_DEPTH_TEST);
}
void MyTimer(int Value)
{
	gTheta -= 1;
	gTheta_minute -= 10;


	glutPostRedisplay();
	glutTimerFunc(20, MyTimer, 1);
}

int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
	glutInitWindowSize(window_width, window_height);
	glutCreateWindow("One Lighting Two Objects");
	MyInit();
	glMatrixMode(GL_PROJECTION);
	glutDisplayFunc(MyDisplay);
	glutMotionFunc(Mouse_Movement);
	glutReshapeFunc(MyReshape);
	glutSpecialFunc(MySpecial);
	glutTimerFunc(20, MyTimer, 1);

	glutMainLoop();
	return 0;
}